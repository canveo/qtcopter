#!/usr/bin/env python2

import math
import rospy
from mavros_msgs.msg import OpticalFlowRad
from std_msgs.msg import Float64
from qtcopter.msg import controller_msg
#from qtcopter.srv import UpdateWaypointsSrv
from sensor_msgs.msg import Range

import tf
from time import time, sleep

class FlowHandler:
    " Handle flow (px4flow OPTICAL_FLOW_RAD) messages to update location "
    def __init__(self):
        self._listener = tf.TransformListener()
        self._publisher = tf.TransformBroadcaster()
        #self._flowUpdateWayPointsSrv = rospy.Service('/flow/update_waypoints', UpdateWaypointsSrv, self._UpdateWaypointsRequestHandler)
        tr = tf.Transformer()

        # TODO: make a frame for the flow
        self._flow_frame = 'downward_cam_optical_frame'
        self.__pid_input_pub = rospy.Publisher('/pid_input', controller_msg,
                                               queue_size=1)
        #self.__height_pub = rospy.Publisher('/height_flow', Range, queue_size=1)
        self.last_good = 0
        self.last_quality_warn = 0
        self.allow_zero_quality = rospy.get_param('px4flow/allow_zero_quality', False)
        self.previous_height = None
        self.previous_angle = None
        self.current_angle = None
        self.sum_angle = 0
        #self.lpf = [2,2,2,2,2]
        # check if we already have transformation (if flow node restarted)
        try:
            ((x, y, z), rot) = self._listener.lookupTransform(self._flow_frame, 'waypoint', rospy.Time(0))
        except tf.LookupException:
            # no waypoint available
            init_waypoint = True
        else:
            init_waypoint = False
            theta = tf.transformations.euler_from_quaternion(rot)[2]
            rospy.loginfo('Flow init: Using previous flow delta: x {0}, y {1}, z {2}, theta {3}'.format(
                            x, y, z, theta))

        if init_waypoint:
            # set initial deltas to 0 (until we get something from CV)
            x, y, z, theta = 0, 0, 0, 0
            rot =  tf.transformations.quaternion_from_euler(0, 0, theta)
            rospy.loginfo('Flow init: Publishing initial flow delta: x {0}, y {1}, z {2}, theta {3}'.format(
                                            x, y, z, theta))
            # for some reason, sendTransform() immediately on start / broadcaster creation
            # will occasionally fail. it will work after about 100ms.
            delay = 0.1 # seconds to wait between tries
            max_init_time = 3 # seconds after which we fail
            start = time()
            while True:
                self._publisher.sendTransform((x, y, z),
                                          rot,
                                          rospy.Time.now(),
                                          'waypoint',
                                          self._flow_frame)
                try:
                    self._listener.waitForTransform(self._flow_frame, 'waypoint', rospy.Time(0), rospy.Duration(delay))
                except tf.Exception:
                    # transform is probably still not available. try again :(
                    if time()-start > max_init_time:
                        # we tried for more than 3 seconds. abort
                        rospy.logerr('FAILED publishing initial flow delta.')
                        raise
                    continue
                # ok :) we got a transform!
                break
            rospy.loginfo('Published initial flow delta after {0} seconds'.format(time()-start))

    #UpdateWaypointsRequestHandler : handler function for setting new waypoints to upon service call.
    #param : request - holds x y z t values.
    '''
    def _UpdateWaypointsRequestHandler(self, request):
        try:
            rot = tf.transformations.quaternion_from_euler(0, 0, request.t)
            self._publisher.sendTransform((request.x, request.y, request.z),
                                          rot,
                                          rospy.Time.now(),
                                          'waypoint',
                                          self._flow_frame)
        except:
            rospy.logerr("An error occured while trying to set new waypoints")
        return True
    '''
    def handle_compass_hdg_rad(self, data):
        self.current_angle = math.radians(data.data)
        #print 'NEW ANGLE:', self.current_angle/math.pi
    def handle_optical_flow_rad(self, data):
        if data.quality == 0:
            if self.last_quality_warn+1 < time():
                # only print warning every second
                self.last_quality_warn = time()
                rospy.logwarn('Flow quality = 0 for %d seconds, allow_zero_quality=%r, current_angle=%r'\
                            % (time()-self.last_good, self.allow_zero_quality, self.current_angle))
            if not self.allow_zero_quality:
                return
        else:
            self.last_good = time()

        if data.distance == 0:
            if self.previous_height is not None:
                rospy.logwarn('Flow distance (height) = 0, using previous height %r' % (self.previous_height, ))
                data.distance = self.previous_height

        #lpf_average_distance = sum(self.lpf) / float(len(lpf))
        #lpf_curent_distance = data.distance
        #if average distance * 1.1 < data.distance or average_distance * 0.9 > data.distance:
        #    data.distance = self.previous_height
        #self.lpf.append(lpf_current_distance)
        #self.lpf.pop(0)

        if self.current_angle is None:
            # wait for angle publish
            #rospy.logwarn('Flow: compass_hdg not received yet.')
            #return
            compass_hdg_rad = 0
        else:
            compass_hdg_rad = self.current_angle

        # TODO/FIXME/BUG: We have a race condition here that we must fix.
        # If a new transform to the waypoint is submitted after we sampled it,
        # and before we added the delta to it, we will overwrite the new value
        # with the previous one (+delta). This is bad.
        # get latest (current) transformation
        try:
            ((my_x, my_y, z), rot) = self._listener.lookupTransform(self._flow_frame,
                                                            'waypoint',
                                                            rospy.Time(0))
        except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException), e:
            rospy.logwarn('Exception in handle_optical_flow_rad:lookupTransform(\'waypoint\'):')
            rospy.logwarn(str(e))
            return


        #transform the old transform according to old angle
        if self.previous_angle is None:
            self.previous_angle = compass_hdg_rad
        previous_angle = self.previous_angle

        #calculate the addition to the compass axes system
        cosa = math.cos(previous_angle)
        sina = math.sin(previous_angle)

        x = my_x * cosa + my_y * sina
        y = -my_x * sina + my_y * cosa

        # calculate flow addition in my axes system
        my_dx = data.integrated_x*data.distance
        my_dy = data.integrated_y*data.distance

        #calculate the addition to the compass axes system
        cosa = math.cos(compass_hdg_rad)
        sina = math.sin(compass_hdg_rad)

        dx = my_dx * cosa + my_dy * sina
        dy = -my_dx * sina + my_dy * cosa

        if self.previous_height is None:
            self.previous_height = data.distance

        dz = data.distance - self.previous_height
        self.previous_height = data.distance

        dangle = compass_hdg_rad - self.previous_angle
        self.sum_angle += dangle
        #print 'sum dangle:', self.sum_angle/math.pi, 'pi'
        self.previous_angle = compass_hdg_rad
        #print 'prev angle:', self.previous_angle

        z += dz
        x += dx
        y += dy

        #calculate the values in my axes system.
        #cosMinusa = cosa
        #sinMinusa = -sina

        my_x = x * cosa - y * sina
        my_y = x * sina + y * cosa


        # publish (my_x, my_y, z)
        theta = tf.transformations.euler_from_quaternion(rot)[2]
        #print 'old theta:', theta/math.pi, 'pi'
        theta += dangle
        #print 'theta:', theta/math.pi, 'pi'

        #if abs(self.sum_angle%(2*math.pi) - theta%(2*math.pi))%(2*math.pi) > 1e-5:
        #    print rospy.logerr('sum_angle != theta!! (%.6f != %.6f) pi' % (self.sum_angle%(2*math.pi), theta%(2*math.pi)))

        rot = tf.transformations.quaternion_from_euler(0, 0, theta)
        #rospy.loginfo('Publish flow delta: x {0}, y {1}, z {2}, theta {3} pi'.format(
        #                                my_x, my_y, z, theta/math.pi))
        #print 'SEND FLOW', time()
        self._publisher.sendTransform((my_x, my_y, z),
                                      rot,
                                      rospy.Time.now(),
                                      'waypoint',
                                      self._flow_frame)
        #print 'SENT FLOW', time()
        # publish to PID
        msg = controller_msg()
        # The following is correct with the sonar further away from the drone.
        # If the sonar is closer, need to multiple my_y, my_x by -1.
        msg.x = my_y
        msg.y = my_x
        msg.z = z
        msg.t = theta
        self.__pid_input_pub.publish(msg)
        # TODO: The following sleep is because sometimes lookupTrasform() just
        # after sendTransform() will get the previous value.. sleep fixes it.
        # we need to find a real solution for this.
        sleep(0.01)

        #r = Range()
        #r.range = data.distance
        #rospy.loginfo('Publish flow height: {0} meters'.format(r.range))
        #self.__height_pub.publish(r)

        '''
        # TODO: we can calculate heading direction from dx/dy.
        if data.integration_time_us != 0:
            # speed
            speed_x = data.integrated_x/(1.0*data.integration_time_us/1e6)*data.distance
            speed_y = data.integrated_y/(1.0*data.integration_time_us/1e6)*data.distance

            # time of data capture
            capture_time = data.header.stamp.secs + data.header.stamp.nsecs/1e9
        '''

if __name__ == '__main__':
    rospy.init_node('flow')
    flow = FlowHandler()
    rospy.Subscriber("/px4flow/px4flow/raw/optical_flow_rad", OpticalFlowRad, flow.handle_optical_flow_rad)
    rospy.Subscriber("/mavros/global_position/compass_hdg", Float64, flow.handle_compass_hdg_rad)
    rospy.spin()

