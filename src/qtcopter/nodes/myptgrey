#!/usr/bin/env python2

import time
import yaml

import rospy
from qtcopter.ptgrey import PTGreyCamera
import flycapture2 as fc2
from sensor_msgs.msg import CameraInfo, Image

from cv_bridge import CvBridge, CvBridgeError
import camera_info_manager as cim

class PTGreyNode:
    def __init__(self):
        rospy.init_node('myptgrey')

        # publishing stuff
        self.__image_pub = rospy.Publisher("image_color", Image, queue_size=1)
        self.__info_pub = rospy.Publisher("/camera/camera_info", CameraInfo, queue_size=1)
        self.__bridge = CvBridge()

        # camera info
        self.info_url = rospy.get_param('/camera/info_url')
        self.name = rospy.get_param('/camera/name')
        #self.lense = rospy.get_param('lense')
        #self.serial = rospy.get_param('camera_serial')
        self.__info_msg = self._load_camera_info(self.info_url, self.name)

        m = self.__info_msg
        #m.header.frame_id = 'camera'
        m.binning_x = 1
        m.binning_y = 1
        m.roi.x_offset = 0
        m.roi.y_offset = 0
        m.roi.height = 0
        m.roi.width = 0
        m.roi.do_rectify = True



        c = PTGreyCamera()
        self.__cam = c

        if rospy.get_param('myptgrey/auto_exposure'):
            c.set_property_auto(fc2.AUTO_EXPOSURE)
        else:
            c.set_property_manual(fc2.AUTO_EXPOSURE, rospy.get_param('myptgrey/exposure'))

        if rospy.get_param('myptgrey/auto_shutter'):
            c.set_property_auto(fc2.SHUTTER)
        else:
            c.set_property_manual(fc2.SHUTTER, rospy.get_param('myptgrey/shutter_speed')*1000)

        if rospy.get_param('myptgrey/auto_gain'):
            c.set_property_auto(fc2.GAIN)
        else:
            c.set_property_manual(fc2.GAIN, rospy.get_param('myptgrey/gain'))

        c.set_property_manual(fc2.FRAME_RATE, rospy.get_param('myptgrey/frame_rate'))

        c.print_infos()

        c.start_capture()
    def __del__(self):
        self.__cam.stop_capture()

    def publish_img(self):
        img = self.__cam.get_frame()
        msg = self.__bridge.cv2_to_imgmsg(img, "bgr8")
        # TODO: modify msg to have correct time stamp
        msg.header.stamp = rospy.Time.now()
        self.__image_pub.publish(msg)
    def publish_info(self):
        msg = self.__info_msg
        msg.header.stamp = rospy.Time.now()
        self.__info_pub.publish(msg)
    @staticmethod
    def _load_camera_info(url, camera_name):
        if not url.lower().startswith('file://'):
            raise NotImplemented("only urls of type file:// are implemented")
        url = url[7:]
        # frame_id = camera name from file
        info = cim.loadCalibrationFile(url, camera_name)
        info.header.frame_id = yaml.load(open(url, 'r').read())['camera_name']

        return info



if __name__ == '__main__':
    node = PTGreyNode()
    rate = rospy.get_param('/cv/hz')
    rate = rospy.Rate(rate)
    while not rospy.is_shutdown():
        node.publish_info()
        node.publish_img()
        rate.sleep()

